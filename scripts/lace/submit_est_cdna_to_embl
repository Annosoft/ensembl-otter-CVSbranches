#!/usr/local/bin/perl -w

use strict;

# submit_est_cdna_to_embl: wrapper to run various scripts


#### modify variables before running a new submission

my $taxon_id = 8364;
my $cdna_db  = "tropicalis_cdna_2005_09_26";

$cdna_db =~ /tropicalis_cdna_(.+)/;
my $release_date = $1;

# --- db conf files ---

my ($cdna_db_conf_pipe, $blast_db_conf, $cdna_db_conf);
#$cdna_db_conf_pipe = $blast_db_conf = "/ecs4/work5/finished/production/cdna_est/conf/cDNA_DB_trop.conf";

$cdna_db_conf_pipe = $blast_db_conf = $cdna_db_conf = "/ecs4/work5/finished/production/cdna_est/conf/ck1_cDNA_test.conf";

my $cdna_db_cbi1_conf = "/nfs/team71/analysis/ck1/SCRIPT_CVS/cdna_db/conf/ck1_cDNA_test.conf";
my $est_db_conf       = "/nfs/team71/analysis/ck1/SCRIPT_CVS/est_db/conf/TROP_SUB_TEST.conf";

# --- other file locations

my $EST            = "/nfs/disk100/humpub/est";
my @load_fldrs     = glob("$EST/tropicalis_cdna/tropicalis_load*");
my $new_load_fldr  = $load_fldrs[-1];


my $file_list      = glob("$new_load_fldr/file_list*.txt");
my $all_fasta      = "$new_load_fldr/all_x_trop_".$release_date.".fasta";

my $embl_file      = "$EST/embl_temp/Xtrop/X_trop_cDNA_$release_date.embl";
my $accepted_accs  = "$new_load_fldr/accepted_X_tropicalis_cDNAs_$release_date.fasta";
my $all_cDNA_fasta = "$new_load_fldr/all_X_tropicalis_cDNAs_$release_date.fasta";

my $cdna_db_dump_dir  = "$EST/txt_db_dump/$cdna_db";

my $base      = "/nfs/team71/analysis/ck1/SCRIPT_CVS";
my $pipe_base = "/ecs4/work5/finished/production/cdna_est";


my ($cwd, $s);


#	1.    EXTRACTING FASTA
if ( $ARGV[0] == 1 ){
  print STDOUT "1.    EXTRACTING FASTA\n\n";

  $cwd = "$pipe_base/sanger";
  $s = system("$cwd/extract_fasta_from_finished_directories --dir_file=$file_list --use_library --output_file=$all_fasta");
  check_status($s);
}

#	2.   LOADING CLONES (this step did not store sanger_id info: see create_new_Clone() )
if ( $ARGV[0] == 2 ){
  print STDOUT "2.   LOADING CLONES\n\n";

  $cwd = "$pipe_base/scripts";
  $s = system("$cwd/load_cdna_clones_from_fasta --db_conf=$cdna_db_conf_pipe --fasta_file=$all_fasta --taxon_id=$taxon_id");
 #$s = system("$cwd/test_sanger_id --db_conf=$cdna_db_conf_pipe --fasta_file=$all_fasta --taxon_id=$taxon_id");
  check_status($s);
}

#	3.   SETUP BLASTS
if ( $ARGV[0] == 3 ){
  print STDOUT "3.   SETUP BLASTS\n\n";

  $cwd = "$pipe_base/scripts";
  # blast_db is the value of external_db.dbname

  # do incremental BLAST only
  $s = system("$cwd/setup_cDNA_DB_BLAST --db_conf=$cdna_db_conf_pipe --all_libs --search_conf_name='WuBLASTX_uniprot' --incremental");

  # do full BLAST
  #$s = system("$cwd/setup_cDNA_DB_BLAST --db_conf=$cdna_db_conf_pipe --all_libs --search_conf_name='WuBLASTX_uniprot' --search_description=\"Translated (WuBLASTX) search of Clones against UNIPROT\" --blast_db=uniprot --blast_type=wublastx --search_type=Clone");

  check_status($s);
}

#	4.   SUBMIT BLASTS
if ( $ARGV[0] == 4 ){
  print STDOUT "4.   SUBMIT BLASTS\n\n";

  $cwd = "$pipe_base/scripts";
  $s = system("$cwd/submit_cDNA_DB_jobs --db_conf=$blast_db_conf --search_conf_name=WuBLASTX_uniprot --host_type=bc_hosts");
  #$s = system("$cwd/submit_cDNA_DB_jobs --db_conf=$blast_db_conf --search_conf_name=WuBLASTX_uniprot --host_type=bc_hosts --lsf_queue=hugemem");
  check_status($s);
}

#	5.   LOAD_ESTS
if ( $ARGV[0] == 5 ){
  print STDOUT "5.   LOAD_ESTS\n\n";

  $cwd = "$pipe_base/sanger";
  $s = system("$cwd/copy_EST_DB_to_cDNA_DB --clone_fasta=$all_fasta --est_db_conf=$est_db_conf --cdna_db_conf=$cdna_db_conf_pipe");
  check_status($s);
}

#	6.   CHECK CLONE IDENTITY (not run on ecs4 as it failes to find Bio/SimpleAlign.pm
#                              temporarily put bioperl-1.2 before 0.7.2
if ( $ARGV[0] == 6 ){
  print STDOUT "6.   CHECK CLONE IDENTITY\n\n";


  #Checking the newly-loaded clones at 84%
#  $cwd = "$pipe_base/scripts";
  $cwd = "$base/cdna_db/scripts";
  $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf");
  check_status($s);
  $s = system("perl $cwd/check_clone_identity --db_conf=$cdna_db_cbi1_conf --all_unconfirmed");
  check_status($s);
}

#	7.   CHECK CLONE FRAMESHIFTS
if ( $ARGV[0] == 7 ){
   print STDOUT "7.   CHECK CLONE FRAMESHIFTS\n\n";
   $cwd = "$pipe_base/scripts";
   $s = system("perl $cwd/check_clone_frameshifts --db_conf=$cdna_db_conf_pipe --search_conf_name=WuBLASTX_uniprot");
   check_status($s);
}

#	8.   BACKED UP
if ( $ARGV[0] == 8 ){
   print STDOUT "8.   BACKED UP\n\n";

   print STDOUT "Your need to\n";
   printf STDOUT ("%s\n%s\n%s\n%s\n", "(1) ssh to otterpipe2", "(2) Create directory 'mkdir $cdna_db_dump_dir'", "(3) chmod -R 777 $cdna_db_dump_dir",
                  "(4) Run mysqldump -uottroot -plutrasuper -S /mysql/data_3303/otter-pipe2-master.sock --tab=$cdna_db_dump_dir/ --fields-terminated-by='\t' $cdna_db")
}

#	9.   UPDATE_CLONES_CURRENT_VERSION
if ( $ARGV[0] == 9 ){
  print STDOUT "9.   UPDATE_CLONES_CURRENT_VERSION\n\n";
  $cwd = "$pipe_base/submissions";
  $s = system("perl $cwd/update_clones_current_version --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id");
  check_status($s);
}

#	10.   SUBMIT_AND_WITHDRAW_CLONES
#   Note: clones with submission_status='withdrawing' need to be withdrawn by contacting the EMBL staff at EBI.
#         Once withdrawn, their submission_status need to be set to 'withdrawn'

if ( $ARGV[0] == 10 ){
  print STDOUT "10.   SUBMIT_AND_WITHDRAW_CLONES\n\n";
  $cwd = "$pipe_base/submissions";
  $s = system("perl $cwd/submit_and_withdraw_clones --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id --do_withdraws");
  #$s = system("perl $cwd/test_submit --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id --do_withdraws");
  check_status($s);
}

=head2 SUBMIT_AND_WITHDRAW_CLONES

select submission_status, count(*) from clone group by submission_status;
+-------------------+----------+
| submission_status | count(*) |
+-------------------+----------+
| created           |      303 |
| accepted          |     3404 |
| mothballed        |      711 |
| obsolete          |       58 |
+-------------------+----------+

=cut

#	11.   MAKE EMBL FLATFILE
if ( $ARGV[0] == 11 ){
  print STDOUT "11.   MAKE EMBL FLATFILE\n\n";
  $cwd = "$pipe_base/submissions";
  $s = system("$cwd/make_embl_flatfile --db_conf=$cdna_db_conf_pipe --taxon_id=$taxon_id > $embl_file");
  print STDOUT "Creating EMBL flatfile: $embl_file\n";
  check_status($s);
}
#------------------------------------
#       PRE submission steps
#------------------------------------

#	11.1.   UPDATE CLONES FROM EMBL

# This does the sanger_id -> acc mapping
# run only on humsrv1 as this host is allowed to go through the EBI firewall
# and connects to ORACLE database for updating clone info
# needs username and password for ORACLE (.netrc)

if ( $ARGV[0] == 111 ){
  print STDOUT "11.1.   UPDATE CLONES FROM EMBL\n\n";
  $cwd = "$base/cdna_db/submissions";
  $s = system("$cwd/update_clones_from_EMBL --db_conf=$cdna_db_cbi1_conf");
  check_status($s);
}

#	12.   SUBMIT
#  run only on humsrv1 as this host is allowed to go through the EBI firewall
#  connection params in .netrc (file perm. mode: 600)

if ( $ARGV[0] == 12 ){
  print STDOUT "12.   SUBMIT TO EMBL\n\n";

  $cwd = "$base/cdna_db/submissions";
  $s = system("$cwd/submit_xenopus_ests $embl_file");
  check_status($s);

  #grep -c 'Finished' datalib_xtrop_cdna_07_12_04.txt
}

#------------------------------------------------------
#  POST submission steps:
#
#       proceed AFTER receiving feedback from EMBL
#------------------------------------------------------

#	13.   UPDATE CLONES FROM EMBL

# run only on humsrv1 as this host is allowed to go through the EBI firewall
# and connects to ORACLE database for updating clone info
# needs username and password for ORACLE (.netrc)

if ( $ARGV[0] == 13 ){
  print STDOUT "13.   UPDATE CLONES FROM EMBL\n\n";
  $cwd = "$base/cdna_db/submissions";
  $s = system("$cwd/update_clones_from_EMBL --db_conf=$cdna_db_cbi1_conf");
  check_status($s);
}

#	14.   DUMPING CLONES
# dump accepted clones to FASTA with acc.ver format
if ( $ARGV[0] == 14 ){
  print STDOUT "14.   DUMPING CLONES\n\n";

  $cwd = "$pipe_base/scripts/utils";
  $s = system("perl $cwd/dump_clones --db_conf=$cdna_db_conf --taxon_id=$taxon_id --accepted --output_file=$accepted_accs");
  check_status($s);

  if ( $s == 0 ){
	my $num = `grep -c \"^>\" $accepted_accs`;
	chomp $num;
	print "Accepted clones dumped to $accepted_accs\nFound $num accepted clones\n";
  }

  $s = system("perl $cwd/dump_clones --db_conf=$cdna_db_conf --taxon_id=$taxon_id --all --output_file=$all_cDNA_fasta");
  check_status($s);

  if ( $s == 0 ){
	my $num = `grep -c \"^>\" $all_cDNA_fasta`;
	chomp $num;
	print "All clones dumped to $all_cDNA_fasta\nFound total: $num clones\n";
  }
}


#	15. ARCHIVING AND UPDATING FTP DIR

if ( $ARGV[0] == 15 ){
	print STDERR "UPDATE FTP DIR AND ARCHIVING\n";

	my $ftp_live = "/nfs/disk69/ftp/pub3/EST_data/Xenopus/FINISHED_cDNAs";

	# makie archive dir

	my $last_release_date = `ls $ftp_live/accepted_X_tropicalis_cDNAs*`;
	$last_release_date =~ /(\d+_\d+_\d+)/;
	$last_release_date = $1;
	my $ftp_archive = "/nfs/disk69/ftp/pub3/EST_data/Xenopus/archive/Release_${last_release_date}_Finished_cDNA";
	system("mkdir $ftp_archive");

	# update FTP dir

	chdir $ftp_live;

	my $chksum;
	foreach my $file ( $accepted_accs, $all_cDNA_fasta ){

	  print "Copying $file . . .\n";
	
	  system("cp $file .");
	  my $copied = `basename $file`;
	  chomp $copied;

	  my $chk = system("diff $file $copied");
	  die "File copying error\n" if $chk != 0;

	  # gzip and md5sum for users
	  $chk = system("/bin/gzip $copied");
	  die "Failed to zip $copied\n" if $chk != 0;

	  my $zip = $copied.".gz";

	  my $md5sum_accepted_ftp_zip  = `/usr/local/ensembl/bin/md5sum $zip`;
	  $chksum .= $md5sum_accepted_ftp_zip;
	}

	open(my $fh, ">md5sum" ) or die "Failed to create md5sum file\n";
	printf $fh $chksum;


	# move old data into archive
	
	if ( -d $ftp_archive ){
	  system("mv *$last_release_date* $ftp_archive");
	}	
	
}

sub check_status {
  shift == 0 ? print STDOUT "Command successful\n\n" : print STDOUT "command failed\n\n";
}


# Release letter

__DATA__

                            Release date: 2005_09_26

The Sanger Xenopus tropicalis EST/cDNA project are pleased to announce the
public availability of an enlarged set of X. tropicalis cDNA sequences finished
at the Sanger Institute.

Data are downloadable from:
ftp://ftp.sanger.ac.uk/pub/EST_data/Xenopus/FINISHED_cDNAs

File        : accepted_X_tropicalis_cDNAs_2005_09_26.fasta.gz
Contents    : 4710 cDNA sequences
Increase    : 206 added to the 2005-09-26 release

The 4710 cDNA  seqs that passed quality control (QC), and accepted by EMBL
should also be available from EMBL/GenBank.

In the file, '>' header lines have the format: '> clone_name accession.version'

And also:
5628
File        : all_X_tropicalis_cDNAs_2005_09_26.fasta.gz
Contents    : 5535 cDNA sequences
Increase    : 0 seqs added to the 2005-09-26 release

All cDNA sequences finished to date, including the unsubmitted sequences,
that did not pass QC: 5535

In the file reason(s) for failure are indicated after the clone_name on '>'
header lines. Firstly 'unsubmitted' appears in the place of the
accession.version, followed by 'unidentified' and/or 'frameshifted'


Best regards

Chao-Kung Chen


__END__



Mailing list (contains estdb mailing list *)
--------------------------------------------
Blumberg@uci.edu,
EALindquist@lbl.gov,
aaron.zorn@chmcc.org,
christophe.klopp@toulouse.inra.fr,
ck1@sanger.ac.uk,
dg1@sanger.ac.uk,
ea3@mole.bio.cam.ac.uk,
ealindquist@lbl.gov,
gerhardd@mail.nih.gov,
jgrg@sanger.ac.uk,
jim@gurdon.cam.ac.uk,
jkb@sanger.ac.uk,
jla1@sanger.ac.uk,
jrh@sanger.ac.uk,
kj2@sanger.ac.uk,
m.gilchrist@gurdon.cam.ac.uk,
mf1@sanger.ac.uk,
np209@cam.ac.uk,
np209@mole.bio.cam.ac.uk,
paul.e.boardman@umist.ac.uk,
pbbrokstein@lbl.gov
rgt@sanger.ac.uk,
rmd@sanger.ac.uk,
simon.hubbard@umist.ac.uk,
th@sanger.ac.uk,
transcript@sanger.ac.uk,
wagner@ncbi.nlm.nih.gov,


* estdb mailing list:
---------------------
aaron.zorn@chmcc.org
christophe.klopp@toulouse.inra.fr
ck1@sanger.ac.uk
ea3@mole.bio.cam.ac.uk
ealindquist@lbl.gov
jgrg@sanger.ac.uk
jim@welc.cam.ac.uk
jla1@sanger.ac.uk
jrh@sanger.ac.uk
mdr@sanger.ac.uk
mf1@sanger.ac.uk
mike.gilchrist@welc.cam.ac.uk
np209@mole.bio.cam.ac.uk
paul.e.boardman@umist.ac.uk
pbbrokstein@lbl.gov
simon.hubbard@umist.ac.uk
th@sanger.ac.u
