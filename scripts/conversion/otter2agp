#!/usr/local/bin/perl -w

### otter2agp

use strict;

{
    # Slurp in all the xml
    my $xml = join '', <>;
    my $parser = OtterParse->new(\$xml);
    my $pos = 1;
    my $rank = 1;
    my $prev_chr = '';
    foreach my $frag ($parser->get_subtags('sequencefragment')) {
        my $acc         = $frag->get_value('id');
        my $sv          = $frag->get_value('version');
        my $chr_name    = $frag->get_value('chromosome');
        my $chr_start   = $frag->get_value('assemblystart');
        my $chr_end     = $frag->get_value('assemblyend');
        my $ctg_ori     = $frag->get_value('assemblyori');
        my $ctg_start   = $frag->get_value('assemblyoffset');
        my $frag_length = $chr_end - $chr_start + 1;
        my $ctg_end = $ctg_start + $frag_length - 1;
        
        if ($chr_name ne $prev_chr) {
            warn "New chromosome '$chr_name'\n";
            $rank = 1;
        }
        $prev_chr = $chr_name;
        
        if ($chr_start != $pos) {
            my $end = $chr_start - 1;
            my $len = $end - $pos + 1;
            print join("\t",
                $chr_name, $pos, $end, $rank, 'N', $len,
                ), "\n";
            $rank++;
        }
        print join("\t",
                $chr_name, $chr_start, $chr_end, $rank, 'F',
                "$acc.$sv", $ctg_start, $ctg_end,
                $ctg_ori == 1 ? '+' : '-',
                ), "\n";
        
        $pos = $chr_end + 1;
        $rank++;
    }
}

package OtterParse;

sub new {
    my( $pkg, $txt_ref ) = @_;
    
    return bless $txt_ref, $pkg;
}

{
    my( %parse_pattern );

    sub get_subtags {
        my( $self, $tag ) = @_;
        
        my $pat = $parse_pattern{$tag} ||= $self->make_pattern($tag);
        my( @values );
        while ($$self =~ /$pat/g) {
            my $v = $1;
            push(@values, ref($self)->new(\$v));
        }
        return @values;
    }

    sub get_value {
        my( $self, $tag ) = @_;
        
        my $pat = $parse_pattern{$tag} ||= $self->make_pattern($tag);
        my ($v) = $$self =~ /$pat/;
        if ($v) {
            return $v;
        } else {
            return;
        }
    }
}

sub make_pattern {
    my( $self, $tag ) = @_;
    
    return qr{<$tag>(.*?)</$tag>}s;
}


__END__

=head1 NAME - otter2agp

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

