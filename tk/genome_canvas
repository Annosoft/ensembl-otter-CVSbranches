#!/usr/local/bin/perl -w

### genome_canvas

use strict;

use GenomeCanvas;
use GenomeCanvas::Band::TilingPath;
use GenomeCanvas::Band::Plot;
use GenomeCanvas::DensityBand::RepeatFeature;
use GenomeCanvas::DensityBand::Gene;
use GenomeCanvas::Band::Gene;
use GenomeCanvas::Band::SNP;
use GenomeCanvas::Band::CpG;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Hum::Submission 'prepare_statement'; # For Sanger sequence names
use Getopt::Long 'GetOptions';
use Hum::EnsCmdLineDB;

{
    my $scale = 2000;
    my $v_tiles = 0;
    my $h_tiles = 0;
    my $fpc      = '';
    my $chr_name = '';
    my $chr_start = 0;
    my $chr_end = 0;
    my $font_size = 12;
    my $sanger_names = 0;
    my $landscape = 1;
    my $portrait = 0;
    my $gene_labels     = 1;
    my $show_genes      = 1;
    my $show_repeats    = 1;
    my $show_snps       = 0;
    my $show_cpg        = 1;
    my $big_picture     = 0;
    my( $span_file );
    Hum::EnsCmdLineDB::do_getopt(
        'fpc=s'         => \$fpc,
        'scale=s'       => \$scale,
        'htiles=i'      => \$h_tiles,
        'vtiles=i'      => \$v_tiles,
        'chr=s'         => \$chr_name,
        'start=s'       => \$chr_start,
        'end=s'         => \$chr_end,
        'font_size=i'   => \$font_size,
        'sanger!'       => \$sanger_names,
        'landscape!'    => \$landscape,
        'portrait!'     => \$portrait,
        'gene_labels!'  => \$gene_labels,
        'genes!'        => \$show_genes,
        'repeats!'      => \$show_repeats,
        'snps!'         => \$show_snps,
        'cpg!'          => \$show_cpg,
        'gene_spans=s'  => \$span_file,
        'big!'          => \$big_picture,
        'help'          => sub{ exec('perldoc', $0) },
        ) or die "Error processing command line options";

    if    ($chr_name and ! $fpc) {$fpc = $chr_name}
    elsif ($fpc and ! $chr_name) {$chr_name = $fpc};

    if ($chr_start) {
        my $chr_start_num = parse_num($chr_start)
            or die "Bad chr_start '$chr_start'";
        $chr_start = $chr_start_num;
    }
    if ($chr_end) {
        my $chr_end_num = parse_num($chr_end)
            or die "Bad chr_end '$chr_end'";
        $chr_end = $chr_end_num;
    }
    
    my $mw = CanvasWindow::MainWindow->new;
    $mw->title($fpc);
    my $gc = GenomeCanvas->new($mw);
    $gc->font_size($font_size);
    if ($h_tiles and $v_tiles) {
        die "Can't set both htiles and vtiles";
    }
    elsif ($h_tiles) {
        $gc->horizontal_tile($h_tiles);
    }
    elsif ($v_tiles) {
        $gc->vertical_tile($v_tiles);
    }
    
    $gc->landscape($landscape);
    if ($portrait) {
        $gc->landscape(0);
    }
    

    
    my $canvas = $gc->canvas;

    {
        my $db = Hum::EnsCmdLineDB::connect();

        $chr_name ||= $fpc;
        if ($chr_start and ! $chr_end) {
            $chr_end = get_chr_end($db, $db->static_golden_path_type, $chr_name);
        }
        elsif ($chr_end and ! $chr_start) {
            $chr_start = 1;
        }

        my $stadp = $db->get_StaticGoldenPathAdaptor();

        my( $vc );
        if ($chr_start) {
            print STDERR "Fetching region of chr '$chr_name' from $chr_start to $chr_end\n";
            $vc = $stadp->fetch_VirtualContig_by_chr_start_end(
                $chr_name,
                $chr_start,
                $chr_end,
                );
        } else {
            print STDERR "Fetching virtual contig for all of fpc contig '$fpc'\n";
            $vc = $stadp->fetch_VirtualContig_by_fpc_name($fpc);
        }
                
        my $tiling = GenomeCanvas::Band::TilingPath->new($vc);
        $tiling->title("Contig\nTiling\nPath");
        if ($sanger_names) {
            $tiling->name_morpher(\&get_sanger_name);
        } else {
            $tiling->name_morpher(\&trim_name);
        }
        $tiling->tiling_direction(-1);
        $gc->add_Band($tiling);

        if ($show_repeats) {
            my $repeat = GenomeCanvas::DensityBand::RepeatFeature->new;
            $repeat->virtual_contig($vc);
            $repeat->title('Repeats');
            $repeat->repeat_classifier(\&repeat_class);
            $gc->add_Band($repeat);
        }

        
        my $plot = GenomeCanvas::Band::Plot->new;
        $plot->title('gc Content');
        $plot->virtual_contig($vc);
        $plot->range(0.3,0.7);
        $plot->x_major(0.2);
        $gc->add_Band($plot);

        if ($show_cpg) {
            my $cpg = GenomeCanvas::Band::CpG->new;
            $cpg->virtual_contig($vc);
            $gc->add_Band($cpg);
        }

        if ($show_genes) {
            my $gene_names = GenomeCanvas::Band::Gene->new;
            $gene_names->show_labels($gene_labels);
            $gene_names->label_type_color_list(
                [ 'Known',              'HUMACE-Known',             '#4169e7' ],
                [ 'Novel CDS',          'HUMACE-Novel_CDS',         '#86ceff' ],
                [ 'Novel Transcript',   'HUMACE-Novel_Transcript',  '#ffa600' ],
                [ 'Pseudogene',         'HUMACE-Pseudogene',        '#31ce31' ],
                [ 'Putative',           'HUMACE-Putative',          '#cccccc' ],
                #[ 'Known',              'Known',             '#4169e7' ],
                #[ 'Novel CDS',          'Novel_CDS',         '#86ceff' ],
                #[ 'Novel Transcript',   'Novel_Transcript',  '#ffa600' ],
                #[ 'Pseudogene',         'Pseudogene',        '#31ce31' ],
                );
            $gene_names->virtual_contig($vc);
            $gene_names->span_file($span_file);
            $gene_names->tiling_direction(1);
            $gc->add_Band($gene_names);
        }

        if ($show_snps) {
            my $snps = GenomeCanvas::Band::SNP->new;
            $snps->virtual_contig($vc);
            $snps->tiling_direction(-1);
            $gc->add_Band($snps);
        }

        print STDERR "Rendering canvas\n";
        $gc->residues_per_pixel($scale);
        $gc->render;
    }
    
    $gc->set_scroll_region;

    my $button_frame = $mw->Frame;
    $button_frame->pack(
        -side => 'top',
        );

    make_button($button_frame, 'Exit',
        #sub{ kill 'INT', $$ } );
        sub{ Tk::exit() } );

    make_button($button_frame, 'Zoom in', sub{ $gc->zoom(2) } );
    make_button($button_frame, 'Zoom out', sub{ $gc->zoom(-2) } );
    make_button($button_frame, 'Redraw', sub{
        $gc->render;
        $gc->fix_window_min_max_sizes
        } );
    make_button($button_frame, 'Show outline', sub{
            foreach my $obj ($canvas->find('withtag', 'all')) {
                if ($canvas->type($obj) eq 'rectangle') {
                    $canvas->itemconfigure($obj, -outline => 'red');
                }
            }
        } );

    make_button($button_frame, 'PostScript',
        sub {
            warn "Printed to files:\n",
                map "  $_\n", $gc->print_postscript($fpc);
            if ($big_picture) {
                my $htile = $gc->horizontal_tile || 1;
                my $vtile = $gc->vertical_tile   || 1;
                my( $pwidth, $pheight );
                if ($gc->landscape) {
                    $pwidth  = $gc->page_width  * $htile;
                    $pheight = $gc->page_height * $vtile;
                } else {
                    $pwidth  = $gc->page_width  * $vtile;
                    $pheight = $gc->page_height * $htile;
                }
                if ($pwidth > $pheight) {
                    ($pwidth, $pheight) = ($pheight, $pwidth);
                }
                $gc->page_width ($pwidth);
                $gc->page_height($pheight);
                $gc->horizontal_tile(0);
                $gc->vertical_tile(0);

                warn "Whole diagram printed to:\n",
                    map "  $_\n", $gc->print_postscript($fpc);
            }
        });
    $gc->fix_window_min_max_sizes;
}


                            ###############
                            Tk::MainLoop();
                            ###############


sub get_chr_end {
    my( $db, $static_type, $chr_name ) = @_;
    
    my $get_max = $db->prepare(q{
        SELECT MAX(chr_end)
        FROM static_golden_path
        WHERE type = ?
          AND chr_name = ?
        });
    $get_max->execute($static_type, $chr_name);
    my ($max) = $get_max->fetchrow;
    die "No max for type = '$static_type' and chr_name = '$chr_name'" unless $max;
    return $max;
}

sub parse_num {
    my( $string ) = @_;
    
    my ($int, $mod) = $string =~ /^([\d\.]+)(.?)/ or return;
    if ($mod) {
        $mod = lc $mod;
        if ($mod eq 'k') {
            $int *= 1e3;
        }
        elsif ($mod eq 'm') {
            $int *= 1e6
        }
        else {
            return;
        }
    }
    return $int;
}

sub get_sanger_name {
    my( $name ) = @_;
    
    my $acc = trim_name($name);
    return seq_name_from_acc($acc) || "Em:$acc";
}

{
    my( $sth );
    
    sub seq_name_from_acc {
        my( $acc ) = @_;
        
        $sth ||= prepare_statement(q{
            SELECT s.sequence_name
            FROM project_acc a
              , project_dump d
              , sequence s
            WHERE a.sanger_id = d.sanger_id
              AND d.seq_id = s.seq_id
              AND d.is_current = 'Y'
              AND a.accession = ?
            });
        $sth->execute($acc);
        my ($seq_name) = $sth->fetchrow;
        return $seq_name;
    }
}

sub trim_name {
    my( $name ) = @_;
    
    my ($trim) = $name =~ /^([^\.]+)/
        or confess("Can't get trimmed name from '$name'");
    return $trim;
}


sub make_button {
    my( $parent, $label, $command ) = @_;
    
    my $button = $parent->Button(
        -text => $label,
        -command => $command,
        );
    $button->pack(
        -side => 'left',
        );
    return $button;
}

sub add_contig {
    my( $canvas, $name, $length, $phase, $gap ) = @_;

    my $fill_color = $phase == 3 ? 'black' : 'grey';

    my ($right_most) = ($canvas->bbox('contig'))[2] || 0;

    my $size = $length / 2000;  # 1 pixel = 2 kbp
    my $x1 = $right_most - 1;
    $x1 += $gap * 7.5;
    my $rec = $canvas->createRectangle(
        $x1, 0, $x1 + $size, 8,
        -fill => $fill_color,
        -outline => undef,
        -tags => ['contig', $name],
        );

    my $label = $canvas->createText(
        $x1, -1,
        -text => $name,
        #-font => '-*-helvetica-medium-r-*-*-24-*-*-*-*-*-*-*',
        -font => ['helvetica', 12],
        -anchor => 'sw',
        -tags => ['contig_label', $name],
        );

    my @bbox = $canvas->bbox($name);

    my $sp = 5;
    expand_bbox(\@bbox, $sp);
    my $bkgd = $canvas->createRectangle(
        @bbox,
        -fill    => undef,
        -outline => undef,
        -tags => ['contig_bkgd', $name],
        );
    $canvas->lower($bkgd, $rec);
    nudge_into_free_space($canvas, $name);
}

sub expand_bbox {
    my( $bbox, $pad ) = @_;
    
    $bbox->[0] -= $pad;
    $bbox->[1] -= $pad;
    $bbox->[2] += $pad;
    $bbox->[3] += $pad;
}

sub nudge_into_free_space {
    my( $canvas, $ac ) = @_;
    
    my %self = map {$_, 1} $canvas->find('withtag', $ac);
    while (grep ! $self{$_}, $canvas->find('overlapping', $canvas->bbox($ac))) {
        $canvas->move($ac, 0, -5);
    }
}

{
    my( %repeat_class );

    sub repeat_class {
        my( $band, $repeat_name ) = @_;
        
        make_repeat_class($band) unless %repeat_class;
        return $repeat_class{$repeat_name};
    }
    
    ### Yuk!  I look through the headers of the RepeatMasker
    ### libraries for the classes of each repeat.
    sub make_repeat_class {
        my( $band ) = @_;
        
        my $dbobj = $band->virtual_contig->dbobj;
        my %valid_classes = map {$_, 1} $band->repeat_classes;

        local *LIB;
        my $dir = '/nfs/team71/analysis/jgrg/work/repeatmasker/RepeatMasker08142000/Libraries';
        opendir LIB, $dir or die "Can't opendir '$dir' : $!";
        foreach my $file (map "$dir/$_", grep /\.lib$/, readdir LIB) {
            local *FA;
            open FA, $file or die "Can't read '$file' : $!";
            while (<FA>) {
                if (/^>(\S+)/) {
                    my ($rep, $class) = split /#/, $1, 2;
                    next unless $class;
                    $class =~ s{/.+}{};
                    if (my $stored_class = $repeat_class{$rep}) {
                        warn "$rep: class '$class' doesn't match stored '$stored_class'"
                            if $stored_class ne $class;
                    } else {
                        $repeat_class{$rep} = $class;
                        #printf STDERR "%12s  %-s\n", $class, $rep;
                    }
                }
            }
            close FA;
        }
        close LIB;
    }
}



__END__

=head1 NAME - genome_canvas

=head1 SYNOPSIS

  # Show the region of chromosome 6 from position 1 to 2Mbp
  # but don't show the repeats
  genome_canvas -chr chr6 -start 1 -end 2m -norepeats

=head1 AUTHOR

James Gilbert B<email> jgrg@sanger.ac.uk

